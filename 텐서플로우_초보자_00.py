# -*- coding: utf-8 -*-
"""텐서플로우_초보자_00.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RiwETkzYythrYihMs2QYwfG2CQbdi6Po
"""

# !pip install -q tensorflow-gpu==2.0.0-rc1

import tensorflow as tf
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns
import time

mnist = tf.keras.datasets.mnist
# fashion_mnist = tf.keras.datasets.fashion_mnist

type(mnist)

(x_train, y_train), (x_test, y_test) = mnist.load_data()

# check the respective lengths
print('length of x_train:', len(x_train))
print('length of y_train:', len(y_train))
print('length of x_test:', len(x_test))
print('length of y_test:', len(y_test))

print(len(x_train[0]))
print(len(x_test[0]))

# check the input datas' lengths
print(len(x_train[0][0]))
print(len(x_test[0][0]))

x_train.shape

plt.figure()
plt.imshow(x_train[0])
plt.colorbar()
plt.grid(False)
plt.show()

plt.figure(figsize=(10,10))
for i in range(25):
  plt.subplot(5,5,i+1)
  plt.xticks([])
  plt.yticks([])
  plt.grid(False)
  plt.imshow(x_train[i], cmap=plt.cm.binary)
  #plt.xlabel(class_names[train_lbaels[i]])
plt.show()

df_mnist_first = pd.DataFrame()

for i in range(len(x_train[0])):
  for j in range(len(x_train[0][0])):
      df_mnist_first.loc[i, j]=int(x_train[0][i][j])

df_mnist_first = df_mnist_first.astype(int)

df_mnist_first

def color_positive_red(val):
  color = 'red' if val > 0 else 'black'
  return 'color:%s' % color

df_mnist_first_red_style = df_mnist_first.style.applymap(color_positive_red)
df_mnist_first_red_style

cm = sns.light_palette('blue', as_cmap=True)
df_mnist_first_snsstyle = df_mnist_first.style.background_gradient(cmap=cm)

# '0' row means x_train[0][0]
df_mnist_first_snsstyle

x_train[0][5]

df_mnist_first.loc[5,:]

# data nomalization
x_train, x_test = x_train / 255.0, x_test / 255.0

x_train[0]

model = tf.keras.models.Sequential([
    tf.keras.layers.Flatten(input_shape=(28,28)),
    tf.keras.layers.Dense(128, activation='relu'),
    tf.keras.layers.Dropout(0.2),
    tf.keras.layers.Dense(10, activation='softmax')                          
])

model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])

start = time.time()
model.fit(x_train, y_train, epochs=5)
model.evaluate(x_test, y_test, verbose=2)
print('time:', time.time() - start)

